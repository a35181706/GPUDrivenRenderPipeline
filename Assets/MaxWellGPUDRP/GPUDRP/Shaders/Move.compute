// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel ClusterFunc
#pragma kernel PointFunc
#define COMPUTESHADER
#include "Assets/GPUDRP/Shaders/MCRVariables.cginc"

RWStructuredBuffer<int2> _IndexBuffer;
RWStructuredBuffer<int> instanceCountBuffer;//0, 1, 2: x, y, z    3: offset 4:targetScene
uint _Count;
[numthreads(64, 1, 1)]
void ClusterFunc(uint id : SV_DISPATCHTHREADID)
{
    if(id >= _Count) return;
    MCRCluster meshData = clusterBuffer[id];
    if(meshData.index == instanceCountBuffer[4])
    {
        int currentIndex;
        do{
            InterlockedAdd(instanceCountBuffer[3], 1, currentIndex);
        }while(clusterBuffer[currentIndex].index == instanceCountBuffer[4]);
        int2 indexLead = int2(id, currentIndex);
        clusterBuffer[indexLead.x] = clusterBuffer[indexLead.y];
        InterlockedAdd(instanceCountBuffer[0], 1, currentIndex);
        _IndexBuffer[currentIndex] = indexLead;
    }
}

[numthreads(1, CLUSTER_VERTEX_COUNT, 1)]
void PointFunc(uint2 id : SV_DISPATCHTHREADID)
{
    uint2 index = _IndexBuffer[id.x] * CLUSTER_VERTEX_COUNT + id.y;
    verticesBuffer[index.x] = verticesBuffer[index.y];
}