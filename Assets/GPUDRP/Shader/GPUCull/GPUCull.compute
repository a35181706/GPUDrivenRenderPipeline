// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel FrustmCull
#pragma kernel OcclusCull
#pragma kernel Clear


#include "Assets/GPUDRP/Shader/GPUCull/GPUCullConstant.cginc"
#include "Assets/GPUDRP/Shader/GPUCull/GPUCullVariables.cginc"

float FrustmTest(ClusterInfo info) {

	float3 position = info.center.xyz;
	float3 extent =  info.extent.xyz;
	[unroll]
	for (uint i = 0; i < 6; ++i)
	{
		float4 plane = _FrustumPlanes[i];
		float3 absNormal = abs(plane.xyz);
		if ((dot(position, plane.xyz) - dot(absNormal, extent)) > -plane.w)
		{
			return 0;
		}
	}
	return 1;
}

[numthreads(FRUSTUM_NUM_THREADS,1,1)]
void FrustmCull (uint3 id : SV_DispatchThreadID)
{
	ClusterInfo info = _MCRClusterBuffer[id.x];
	if (FrustmTest(info)<0.01)
	{
		uint tempIndex = 0;
		InterlockedAdd(_MCRCullInstanceCountBuffer[0], 1, tempIndex);
		_MCRCullResultBuffer[tempIndex] = id.x;
	
	}
}

[numthreads(8, 8, 1)]
void OcclusCull(uint3 id : SV_DispatchThreadID)
{

}

[numthreads(1, 1, 1)]
void Clear(uint3 id : SV_DispatchThreadID)
{
	_MCRCullInstanceCountBuffer[0] = 0;
}
